/*UPCYCLED CODE FROM HTTPS://WWW.KAGGLE.COM/CODE/RUDRAPRASADBHUYAN/SQL-PYTHON-ECOMMERCE-ANALYSIS#1.-CALCULATE-THE-MOVING-AVERAGE-OF-ORDER-VALUES-FOR-EACH-CUSTOMER-OVER-THEIR-ORDER-HISTORY. 
FOR SQL SERVER AND DID ADDITIONAL CALCULATIONS, SUCH AS INCREMENTAL SALES AND CORRELATION COEFFICIENT IN SQL*/

--1. LIST ALL UNIQUE CITIES WHERE CUSTOMERS ARE LOCATED.
SELECT DISTINCT
	COUNT(CUSTOMER_CITY)
FROM
	CUSTOMERS; --99,441

--2. COUNT THE NUMBER OF ORDERS PLACED IN EACH YEAR.
SELECT 
	YEAR(ORDER_PURCHASE_TIMESTAMP),
	COUNT(ORDER_ID)
FROM 
	ORDERS
GROUP BY 
	YEAR(ORDER_PURCHASE_TIMESTAMP);

--2016:329
--2017:45,101
--2018:54,011

--3.FIND THE TOTAL SALES PER CATEGORY.
SELECT
	UPPER(PRODUCTS.PRODUCT_CATEGORY) AS PRODUCTS,
	SUM(PAYMENTS.PAYMENT_VALUE) SALES
FROM
	PRODUCTS
	JOIN ORDER_ITEMS ON PRODUCTS.PRODUCT_ID = ORDER_ITEMS.PRODUCT_ID
	JOIN PAYMENTS ON PAYMENTS.ORDER_ID = ORDER_ITEMS.ORDER_ID
WHERE PRODUCT_CATEGORY IS NOT NULL
GROUP BY
	PRODUCT_CATEGORY;

/*SAMPLE DATA
ART	30992.93
BLU RAY DVDS	7935.28
CINE PHOTO	9530.32
FOODS	46428.67
GAMES CONSOLES	195480.38
*/

--4. CALCULATE THE PERCENTAGE OF ORDERS THAT WERE PAID IN INSTALLMENTS.
SELECT
	ROUND(100.0 * SUM(CASE WHEN PAYMENT_INSTALLMENTS >= 1 THEN 1 ELSE 0 END ) / COUNT(*),4) AS PERCENTAGE_PAID
FROM
	PAYMENTS;

--99.9981

--5. COUNT THE NUMBER OF CUSTOMERS FROM EACH STATE.
SELECT
    CUSTOMER_STATE,
    COUNT(CUSTOMER_ID) AS CUSTOMER_COUNT
FROM
    CUSTOMERS
GROUP BY
    CUSTOMER_STATE
ORDER BY
    CUSTOMER_COUNT DESC;

/*SAMPLE DATA
SP	41746
RJ	12852
MG	11635
RS	5466
*/

--6. CALCULATE THE NUMBER OF ORDERS IN 2016
SELECT 
  DATENAME(MONTH, ORDER_PURCHASE_TIMESTAMP) AS MONTH_NAME,
  COUNT(ORDER_ID) AS ORDER_COUNT
FROM 
  ORDERS  
WHERE
  YEAR(ORDER_PURCHASE_TIMESTAMP) = 2016
GROUP BY
  DATENAME(MONTH, ORDER_PURCHASE_TIMESTAMP)
ORDER BY
	DATENAME(MONTH, ORDER_PURCHASE_TIMESTAMP) DESC;


/* 
SEPTEMBER	4
OCTOBER	324
DECEMBER	1
*/

--7. FIND THE AVERAGE NUMBER OF PRODUCTS PER ORDER, GROUPED BY CUSTOMER CITY WHERE THERE ARE MORE THAN 1 PRODUCTS IN AN ORDER
--STEP 1: CALCULATE ORDER COUNTS PER CUSTOMER
SELECT
			ORDERS.ORDER_ID,
			ORDERS.CUSTOMER_ID,
			COUNT(ORDER_ITEMS.ORDER_ID) AS OC
INTO #ORDER_COUNTS
		FROM
			ORDERS
			JOIN ORDER_ITEMS ON ORDERS.ORDER_ID = ORDER_ITEMS.ORDER_ID
		GROUP BY
			ORDERS.ORDER_ID,
			ORDERS.CUSTOMER_ID;
--STEP 2: CALCULATE AVERAGE ORDER COUNT BY CITY AND FILTER
SELECT
	CUSTOMER_CITY,
	AVG_ORDER_COUNT
FROM
(SELECT
	CUSTOMERS.CUSTOMER_CITY,
	ROUND(AVG(OC.OC), 2) AS AVG_ORDER_COUNT
FROM
	CUSTOMERS
	JOIN #ORDER_COUNTS OC ON CUSTOMERS.CUSTOMER_ID = OC.CUSTOMER_ID
GROUP BY
	CUSTOMERS.CUSTOMER_CITY
) A
WHERE A.AVG_ORDER_COUNT > 2
ORDER BY
	AVG_ORDER_COUNT DESC;

/* SAMPLE DATA
PADRE CARVALHO	7
DATAS	6
CANDIDO GODOI	6
CELSO RAMOS	6
*/

--8. CALCULATE THE PERCENTAGE OF TOTAL REVENUE CONTRIBUTED BY EACH PRODUCT CATEGORY
SELECT
	UPPER(PRODUCTS.PRODUCT_CATEGORY),
	(SUM(ORDER_ITEMS.PRICE) / (SELECT SUM(PAYMENTS.PAYMENT_VALUE) FROM PAYMENTS) ) * 100
        AS TOTAL_PRICE
FROM
	PRODUCTS
	INNER JOIN ORDER_ITEMS 
 ON PRODUCTS.PRODUCT_ID = ORDER_ITEMS.PRODUCT_ID
GROUP BY
	PRODUCTS.PRODUCT_CATEGORY
ORDER BY
	TOTAL_PRICE DESC;

/*SAMPLE DATA
HEALTH BEAUTY	7.86239861599937
WATCHES PRESENT	7.52711166013108
BED TABLE BATH	6.47758737921624
SPORT LEISURE	6.17188370669547
*/


--9. IDENTIFY THE CORRELATION BETWEEN PRODUCT PRICE AND THE NUMBER OF TIMES A PRODUCT HAS BEEN PURCHASED
--STEP 1: CALCULATE THE TOTAL NUMBER OF ORDERS AND THE AVERAGE PRICE OF PRODUCTS FOR EACH PRODUCT CATEGORY
SELECT
	P.PRODUCT_CATEGORY,
	COUNT(I.PRODUCT_ID) PRODUCTS,
	ROUND(AVG(I.PRICE), 2) AS PRICE
INTO #PRODUCT_PRICE
FROM
	PRODUCTS P
	JOIN ORDER_ITEMS I ON P.PRODUCT_ID = I.PRODUCT_ID
GROUP BY
	P.PRODUCT_CATEGORY;

-- STEP 2: CALCULATE THE CORRELATION COEFFICIENT
-- FOR SIMPLICITY, WE CALCULATE PEARSON'S CORRELATION MANUALLY
SELECT 
    SUM((P.PRODUCTS - SUB.AVG_PRODUCTS) * (P.PRICE - SUB.AVG_PRICE)) / (SQRT(SUM(POWER(P.PRODUCTS - SUB.AVG_PRODUCTS, 2))) * SQRT(SUM(POWER(P.PRICE - SUB.AVG_PRICE, 2)))) AS CORRELATION_COEFFICIENT
FROM 
    #PRODUCT_PRICE P
CROSS JOIN 
    (SELECT 
         AVG(PRODUCTS) AS AVG_PRODUCTS, 
         AVG(PRICE) AS AVG_PRICE 
     FROM #PRODUCT_PRICE) SUB;

---0.10631514094766

-- DROP THE TEMPORARY TABLE FOR CLEANUP
DROP TABLE #PRODUCT_PRICE;

--10. CALCULATE THE TOTAL REVENUE GENERATED BY EACH SELLER, AND RANK THEM BY REVENUE
WITH SELLERSALES AS (
    -- STEP 1: CALCULATE TOTAL SALES AND RANK SELLERS BY TOTAL SALES
    SELECT 
        ORDER_ITEMS.SELLER_ID,
        SUM(PAYMENTS.PAYMENT_VALUE) AS TOTAL_SALES,
        RANK() OVER (ORDER BY SUM(PAYMENTS.PAYMENT_VALUE) DESC) AS SALES_RANK
    FROM 
        ORDER_ITEMS
    JOIN PAYMENTS 
        ON ORDER_ITEMS.ORDER_ID = PAYMENTS.ORDER_ID
    GROUP BY 
        ORDER_ITEMS.SELLER_ID
),
TOPSELLER AS (
    -- STEP 2: IDENTIFY THE SELLER WITH THE MAXIMUM TOTAL SALES
    SELECT 
        SELLER_ID 
    FROM 
        SELLERSALES
    WHERE 
        SALES_RANK = 1
)
-- STEP 3: RETRIEVE PRODUCTS SOLD BY THE SELLER WITH THE MAXIMUM SALES
SELECT 
   P.PRODUCT_CATEGORY,
    COUNT(OI.PRODUCT_ID) AS TOTAL_PRODUCT_SALES,
    TS.SELLER_ID
FROM 
    TOPSELLER TS
JOIN 
    ORDER_ITEMS OI 
    ON TS.SELLER_ID = OI.SELLER_ID
JOIN 
    PRODUCTS P 
    ON OI.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 
    P.PRODUCT_CATEGORY, TS.SELLER_ID
ORDER BY 
    TOTAL_PRODUCT_SALES DESC;

/*
FURNITURE OFFICE	1233	7C67E1448B00F6E969D365CEA6B010AB
FURNITURE DECORATION	91	7C67E1448B00F6E969D365CEA6B010AB
SPORT LEISURE	18	7C67E1448B00F6E969D365CEA6B010AB
ROOM FURNITURE	16	7C67E1448B00F6E969D365CEA6B010AB
AUTOMOTIVE	3	7C67E1448B00F6E969D365CEA6B010AB
BABIES	3	7C67E1448B00F6E969D365CEA6B010AB
*/

--11. CALCULATE THE MOVING AVERAGE OF ORDER VALUES FOR EACH CUSTOMER OVER THEIR ORDER HISTORY
SELECT
	CUSTOMER_ID,
	ORDER_PURCHASE_TIMESTAMP,
	PAYMENT,
	AVG(PAYMENT) OVER (PARTITION BY CUSTOMER_ID ORDER BY ORDER_PURCHASE_TIMESTAMP ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS MOVING_AVG
FROM
	(
		SELECT
			ORDERS.CUSTOMER_ID,
			ORDERS.ORDER_PURCHASE_TIMESTAMP,
			PAYMENTS.PAYMENT_VALUE AS PAYMENT
		FROM
			PAYMENTS
		JOIN ORDERS ON PAYMENTS.ORDER_ID = ORDERS.ORDER_ID
	) AS A
 ORDER BY 
	MOVING_AVG DESC;


--12. CALCULATE INCREMENTAL SALES BY MONTHS FOR A SPECIFIC PRODUCT FOR THE YEAR 2018 
SELECT
    DATENAME(MONTH, SALE_DATE) AS MONTH_NAME,
    PRODUCT_ID,
    SUM(TOTAL_SALES) AS MONTHLY_SALES,
    SUM(TOTAL_SALES) - LAG(SUM(TOTAL_SALES)) OVER (PARTITION BY PRODUCT_ID ORDER BY DATENAME(MONTH, SALE_DATE)) AS INCREMENTAL_SALES
FROM
    (
        SELECT
            ORDER_PURCHASE_TIMESTAMP AS SALE_DATE,
            PRODUCT_ID,
            SUM(PAYMENT_VALUE) AS TOTAL_SALES
        FROM
            PAYMENTS
        JOIN ORDERS ON PAYMENTS.ORDER_ID = ORDERS.ORDER_ID
        JOIN ORDER_ITEMS P ON ORDERS.ORDER_ID = P.ORDER_ID
        GROUP BY
            ORDER_PURCHASE_TIMESTAMP, PRODUCT_ID
    ) AS SALESDATA
WHERE  YEAR(SALESDATA.SALE_DATE) = 2018
GROUP BY
    DATENAME(MONTH, SALE_DATE), PRODUCT_ID
ORDER BY
    PRODUCT_ID, DATENAME(MONTH, SALE_DATE);

/*
SAMPLE DATA
AUGUST	002159FE700ED3521F46CFCF6E941C76	245.05	-12.6
FEBRUARY	002159FE700ED3521F46CFCF6E941C76	229.5	-15.55
MARCH	002159FE700ED3521F46CFCF6E941C76	462.33	232.83
*/

--13. CALCULATE WHICH PRODUCTS CONTRIBUTE THE MOST TO REVENUE GROWTH OVER TIME AND THEIR PROFITABILITY TREND
WITH PRODUCTQUANTITY AS (
    -- STEP 1: CALCULATE QUANTITY AND COST FOR EACH PRODUCT IN EACH ORDER
    SELECT
        OI.ORDER_ID,
        OI.PRODUCT_ID,
        COUNT(*) AS QUANTITY,
        OI.PRICE AS PRODUCT_COST  -- USING PRICE AS PRODUCT_COST
    FROM
        ORDER_ITEMS OI
    GROUP BY
        OI.ORDER_ID, OI.PRODUCT_ID, OI.PRICE
),
PRODUCTMONTHLYREVENUE AS (
    -- STEP 2: CALCULATE MONTHLY REVENUE FOR EACH PRODUCT
    SELECT
        DATENAME(MONTH, ORDER_PURCHASE_TIMESTAMP) AS SALE_MONTH,
        P.PRODUCT_ID,
        SUM(PY.PAYMENT_VALUE) AS MONTHLY_REVENUE,
        SUM(PQ.QUANTITY * PQ.PRODUCT_COST) AS MONTHLY_COST,
        SUM(PY.PAYMENT_VALUE) - SUM(PQ.QUANTITY * PQ.PRODUCT_COST) AS MONTHLY_PROFIT
    FROM
        ORDERS O
    JOIN PAYMENTS PY ON O.ORDER_ID = PY.ORDER_ID
    JOIN PRODUCTQUANTITY PQ ON O.ORDER_ID = PQ.ORDER_ID
    JOIN PRODUCTS P ON PQ.PRODUCT_ID = P.PRODUCT_ID
    GROUP BY
        DATENAME(MONTH, ORDER_PURCHASE_TIMESTAMP), P.PRODUCT_ID
),
PRODUCTREVENUEGROWTH AS (
    -- STEP 3: CALCULATE REVENUE GROWTH AND PROFIT MARGIN TRENDS FOR EACH PRODUCT
    SELECT
        SALE_MONTH,
        PRODUCT_ID,
        MONTHLY_REVENUE,
        MONTHLY_COST,
        MONTHLY_PROFIT,
        MONTHLY_REVENUE - LAG(MONTHLY_REVENUE) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_MONTH) AS REVENUE_GROWTH,
        CASE
            WHEN MONTHLY_REVENUE > 0 THEN ROUND((MONTHLY_PROFIT / MONTHLY_REVENUE) * 100, 2)
            ELSE NULL
        END AS PROFIT_MARGIN
    FROM
        PRODUCTMONTHLYREVENUE
),
TOPREVENUEGROWTHPRODUCTS AS (
    -- STEP 4: IDENTIFY PRODUCTS WITH THE HIGHEST TOTAL REVENUE GROWTH OVER TIME
    SELECT TOP 10
        PRODUCT_ID,
        SUM(REVENUE_GROWTH) AS TOTAL_REVENUE_GROWTH,
        AVG(PROFIT_MARGIN) AS AVG_PROFIT_MARGIN
    FROM
        PRODUCTREVENUEGROWTH
    GROUP BY
        PRODUCT_ID
    ORDER BY
        TOTAL_REVENUE_GROWTH DESC
)
-- STEP 5: FINAL OUTPUT WITH DETAILED MONTHLY TRENDS FOR TOP PRODUCTS
SELECT
    PRG.SALE_MONTH,
    PRG.PRODUCT_ID,
    PRG.MONTHLY_REVENUE,
    PRG.REVENUE_GROWTH,
    PRG.PROFIT_MARGIN,
    TRG.TOTAL_REVENUE_GROWTH,
    TRG.AVG_PROFIT_MARGIN
FROM
    PRODUCTREVENUEGROWTH PRG
JOIN
    TOPREVENUEGROWTHPRODUCTS TRG ON PRG.PRODUCT_ID = TRG.PRODUCT_ID
ORDER BY
    TRG.TOTAL_REVENUE_GROWTH DESC, PRG.SALE_MONTH;

/* SAMPLE DATA
AUGUST	D6160FB7873F184099D9BC95E30376AF	11311.03	NULL	2.75	19489.8	-5.95
OCTOBER	D6160FB7873F184099D9BC95E30376AF	8214.32	-3096.71	2.61	19489.8	-5.95
SEPTEMBER	D6160FB7873F184099D9BC95E30376AF	30800.83	22586.51	-23.21	19489.8	-5.95
JULY	FD0065AF7F09AF4B82A0CA8F3EED1852	4061.02	NULL	1.5	14245.84	1.59
JUNE	FD0065AF7F09AF4B82A0CA8F3EED1852	18306.86	14245.84	1.68	14245.84	1.59
APRIL	25C38557CF793876C5ABDD5931F922DB	10112.66	NULL	2.67	9259.11	-1.202
DECEMBER	25C38557CF793876C5ABDD5931F922DB	3095.86	-7016.8	2.22	9259.11	-1.202
FEBRUARY	25C38557CF793876C5ABDD5931F922DB	4542.03	1446.17	7.16	9259.11	-1.202
JANUARY	25C38557CF793876C5ABDD5931F922DB	3418.43	-1123.6	9.11	9259.11	-1.202
MARCH	25C38557CF793876C5ABDD5931F922DB	19371.77	15953.34	-27.17	9259.11	-1.202
*/